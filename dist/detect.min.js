/**
 * Logic to detect a crisis situation based on regular expressions. 
 */
__crisis.detect		=	(function(uid) {
	//If the input exists. 
	if (typeof this.nodes[uid].input !== 'undefined') {
		console.log(uid);
	}
});

/**
 * Creates a new handler to search the input. 
 * 
 * @param string uid
 */
__crisis.activate	=	(function(uid) {
	//If the UID exists.
	if (typeof this.nodes[uid] !== 'undefined' && this.nodes[uid]) {
		//If the node is not an object.
		if (typeof this.nodes[uid] !== 'object') {
			//Store a more comprehensive object. 
			this.nodes[uid]	=	{'input': this.nodes[uid], 'uid': uid, 'handler': null};
			
			//Add the data attribute.
			this.nodes[uid].input.setAttribute('data-crisis-id', uid);
			
			//Create a new handler.
			this.nodes[uid].handler	=	function(uid) {
				//Detect whether there's a crisis. 
				__crisis.detect(uid);
			};
				
			//Create a new timer.
			this.nodes[uid].timer	=	null;
			
			//When any input change is detected. 
			this.nodes[uid].input.oninput	=	function() {
				//Get the uid.
				var	uid	=	this.getAttribute('data-crisis-id');
				
				//Clear the existing timer.
				clearTimeout(__crisis.nodes[uid].timer);
				
				//Set a new timeout.
				__crisis.nodes[uid].timer	=	setTimeout(function() {
					//Run the handler.
					__crisis.nodes[uid].handler(uid);
				}, __crisis.waitTime);
			};
			
			//Backwards compatible support.
			this.nodes[uid].input.onpropertychange	=	this.nodes[uid].input.oninput;
		} else if (typeof this.nodes[uid].input !== 'undefined') {
			//Add new handler. 
			this.nodes[uid].handler	=	this.detectOn(uid);
		}
	}
});

/**
 * Deactivates an existing handler. 
 * 
 * @param string uid
 */
__crisis.deactivate	=	(function(uid) {
	//If the UID exists.
	if (typeof this.nodes[uid] !== 'undefined' && this.nodes[uid]) {
		//Deactivate the handler.
		this.nodes[uid].handler	=	this.detectOff(uid);
	}
});

/**
 * Generates a fairly unique identifier. 
 */
__crisis.generate	=	(function() {
	//Return the randomized string. 
	return Math.floor(Math.random() * 0x18006624357).toString(16);
});

/**
 * Finds and gets all nodes that are defined to be searched. 
 */
__crisis.getNodes	=	(function() {
	//For each type of input that needs to be searched.
	for (var i = 0; i < this.inputs.length; i++) {
		//Get all nodes.
		return document.querySelectorAll(this.inputs[i]);
	}
});

/**
 * Processes nodes and activates them for searching. 
 */
__crisis.process	=	(function(nodes) {
	//Get all nodes. 
	var	nodes		=	this.getNodes();
	
	//For each node.
	for (var n = 0; n < nodes.length; n++) {
		//Generate a new UID.
		var	uid		=	this.generate();
		
		//Activate the node for searching. 
		__crisis.activate(uid);
	}
});
